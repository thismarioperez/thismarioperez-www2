// A mixin targeting a specific device width and larger.
// These are the available targets: 'xs', sm', 'md', 'lg', 'xl'
// Skips @media declaration of smallest breakpoint.
//
// @param {string} $media The target media
@mixin respond-from($media) {
    $min: breakpoint-min($media);
    @if $min {
        @media (min-width: #{$min}) {
            @content;
        }
    } @else {
        @content;
    }
}

// Generates modifier classes for a grid of columns, prefixed by size.
// The result will be --[breakpoint]-[col] E.g. .col--xs-6
//
// @param {string} $breakpoint The name of the breakpoint target (e.g. xs, sm, md, lg, xl, etc.)
// @param {int} $columns Amount of columns
// @see https://benjaminhorn.io/code/simple-sass-mixins-for-generating-grids-similar-to-bootstrap/
@mixin col-generator($breakpoint, $columns) {
    @for $i from 1 through $columns {
        $infix: breakpoint-infix($breakpoint);

        &-#{$infix}-#{$i} {
            $width: round-col-width($i, $columns);
            flex: 1 0 $width;
            max-width: $width;
        }
    }
}

// Generates modifier classes for order switching of grid columns
// The result will be --order-[breakpoint]-[index] E.g. .col--md-order-3
//
// @param {string} $bp The name of the breakpoint target (e.g. xs, sm, md, lg, xl, etc.)
// @param {int} $columns Amount of columns
@mixin order-generator($breakpoint, $columns) {
    @for $i from 1 through $columns {
        $infix: breakpoint-infix($breakpoint);

        @if $i==1 {
            &--order#{$infix}-first {
                order: -1;
            }

            &--order#{$infix}-last {
                order: $grid-columns + 1;
            }
        }

        &--order#{$infix}-#{$i} {
            order: $i;
        }
    }
}

/******************************************************************************
 * Positioning
*******************************************************************************/
@mixin cover($position: absolute) {
    position: $position;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
@mixin center-content() {
    display: flex;
    align-items: center;
    justify-content: flex-start;

    @include respond-from($breakpoint-lg) {
        justify-content: center;
    }
}
@mixin center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
}

/******************************************************************************
   * Fonts: Util
  *******************************************************************************/
@mixin font-light() {
    font-weight: 200;
    font-style: normal;
    font-stretch: normal;
}

@mixin font-normal() {
    font-weight: 400;
    font-style: normal;
    font-stretch: normal;
}

@mixin font-bold() {
    font-weight: 700;
    font-style: normal;
    font-stretch: normal;
}

/******************************************************************************
   * Fonts: Styles
  *******************************************************************************/
@mixin font-body {
    font-family: $font-family-mono;
    @include font-normal();
}

@mixin font-headline {
    font-family: $font-family-mono;
    @include font-light();
}

@mixin font-headline-2 {
    font-family: $font-family-mono;
    @include font-bold();
}

/******************************************************************************
   * Typography
  *******************************************************************************/
@mixin b() {
    @include font-bold();
}

@mixin p() {
    font-size: $p-size;
    line-height: $p-line;
    letter-spacing: $track;
    @include font-body();
}

@mixin a() {
    display: inline;
    text-decoration: none;
    @include font-body();
}

@mixin pa() {
    display: inline;
    position: relative;
    z-index: $z-layer-01;
    border-bottom: 1px solid $color-brand-yellow;
    background-color: transparent;
    transition: color $duration $ease, background-color $duration $ease;

    &:after {
        content: '';
        display: block;
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transform: scaleY(0);
        background: $color-brand-yellow;
        z-index: $z-layer-behind;
        transition: transform $duration $ease;
    }
}

@mixin pa-hover() {
    &:hover {
        color: $color-black;

        &:after {
            transform: scaleY(1);
        }
    }
}

@mixin pa-touch-hover() {
    &:hover {
        color: $color-brand-black;
        background: $color-brand-yellow;
    }
}

@mixin ha() {
    display: inline-block;
    position: relative;
    color: $color-brand-yellow;
    overflow: hidden;

    &:before {
        content: '';
        display: block;
        position: absolute;
        top: 0;
        left: -10px;
        width: 10px;
        height: 100%;
        background: $color-brand-yellow;
        z-index: $z-layer-01;
        transition: left $duration-two $ease;
    }

    &:after {
        content: '\2192';
        color: inherit;
        font-weight: normal;
        margin-left: ($nudge / 2);
    }
}

@mixin ha-hover() {
    &:hover:before {
        left: calc(100% + 10px);
    }
}

@mixin li() {
    padding-left: 20px;
    @include p();
}

@mixin ol-li() {
    list-style: decimal;
}

@mixin ul-li() {
    list-style: disc;
}

@mixin pp() {
    margin-top: $expander / 2;
}

@mixin h1() {
    font-size: $h1-size;
    line-height: $h1-line;
    letter-spacing: $track;
    text-transform: none;
    @include font-headline();
}

@mixin h2() {
    font-size: $h2-size;
    line-height: $h2-line;
    letter-spacing: $track;
    text-transform: none;
    @include font-headline();
}

@mixin h3() {
    font-size: $h3-size;
    line-height: $h3-line;
    letter-spacing: $track;
    text-transform: uppercase;
    @include font-headline-2();
}

@mixin hr() {
    color: inherit;
    display: block;
    padding-top: $nudge;
    border-top: none;
    border-right: none;
    border-bottom: 1px solid inherit;
    border-left: none;
}

@mixin quote() {
    font-size: $quote-size;
    line-height: $quote-line;
    letter-spacing: $track;
    text-transform: none;
    @include font-headline();
    font-style: italic;
}

/******************************************************************************
   * Module utility
  *******************************************************************************/
@mixin wrap() {
    padding-left: $padding-wrap;
    padding-right: $padding-wrap;
}
@mixin wrap-copy {
    @include wrap();
    @include respond-from($breakpoint-sm) {
        padding-left: $nudge;
        padding-right: $nudge;
        max-width: $wrap-copy;
    }
    @include respond-from($breakpoint-lg) {
        width: $wrap-copy;
        margin: 0 auto;
    }
}
@mixin wrap-media {
    padding-left: $wrap-media;
    padding-right: $wrap-media;
}
@mixin exp() {
    padding-bottom: $expander;
    padding-top: $expander;
}
@mixin exp-2() {
    padding-bottom: $expander-two;
    padding-top: $expander-two;
}
@mixin exp-3() {
    padding-bottom: $expander-three;
    padding-top: $expander-three;
}
@mixin bg-dark() {
    background: $color-black;
}
@mixin color-dark() {
    color: $color-brand-black;

    hr {
        border-color: $color-brand-black;
    }
}

/******************************************************************************
 * Animations
*******************************************************************************/
// Use this for hidden state of animateables
@mixin animate-hidden() {
    visibility: hidden;
    opacity: 0;
    transform: translate3d(0, $nudge, 0);
    transition: transform $duration-two 0ms $ease,
        opacity $duration-two 0ms $ease, visibility 0ms $duration-two $ease;
}

// use this for visible state of animateables
@mixin animate-visible() {
    opacity: 1;
    transform: translate3d(0, 0, 0);
    visibility: visible;
    transition: visibility 0ms 0ms $ease, opacity $duration-two 0ms $ease,
        transform $duration-two 0ms $ease;
}
